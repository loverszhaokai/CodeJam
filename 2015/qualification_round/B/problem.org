* Problem B. Infinite House of Pancakes


** Problem

At the Infinite House of Pancakes, there are only  _finitely many pancakes_ ,
but there are  _infinitely many diners_  who would be willing to eat them! 

When the restaurant opens for breakfast, among the infinitely many diners,
exactly  _D_  have non-empty plates; 
the  _ith_  of these has  _Pi_  pancakes on his or her plate. 

Everyone else has an  _empty_  plate.

Normally, _every minute_ ,  _every diner_  with a  _non-empty plate_  will  _eat one pancake_  from his or 
her plate. 

*** However, _some minutes may be special_. 

In a  _special minute_ , 

the _head server_ asks for the diners' attention, 

**** chooses  _a diner_  with a  _non-empty plate_ ,

**** lifts some number of pancakes off of that diner's plate 

**** moves those pancakes onto one other diner's (empty or non-empty) plate. 

_No diners eat during a special minute_


*** You are the  _head server_  on duty this morning, 
and it is your job to 

**** _decide which minutes_, if any, will be special, 

**** and which pancakes will  _move_  where.
 
That is, every minute, you can decide 
to either do nothing and let the diners eat, 
or declare a special minute and interrupt the diners to make a single movement of one or more pancakes


Breakfast ends when there are no more pancakes left to eat. 
*** How quickly can you make that happen?


** Input

The first line of the input gives the number of test cases, T.
T test cases follow. 

Each consists of one line with D, the number of diners with non-empty plates, 
followed by another line with D space-separated integers representing the 
numbers of pancakes on those diners' plates.



** Output

For each test case, output one line containing "Case #x: y", where x is the test 
case number (starting from 1) and y is the smallest number of minutes needed to 
finish the breakfast.


** Limits

1 ≤ T ≤ 100.


*** Small dataset

1 ≤ D ≤ 6.
1 ≤ Pi ≤ 9.

*** Large dataset

1 ≤ D ≤ 1000.
1 ≤ Pi ≤ 1000.

** Sample


*** Input

3
1
3
4
1 2 1 2
1
4


*** Output

Case #1: 3
Case #2: 2
Case #3: 3


In Case #1, one diner starts with 3 pancakes and everyone else's plate is empty. One optimal strategy is:

Minute 1: Do nothing. The diner will eat one pancake.

Minute 2 (special): Interrupt and move one pancake from that diner's stack onto another 
diner's empty plate. (Remember that there are always infinitely many diners with empty 
plates available, no matter how many diners start off with pancakes.) No pancakes are 
eaten during an interruption.

Minute 3: Do nothing. Each of those two diners will eat one of the last two remaining pancakes.



In Case #2, it is optimal to let the diners eat for 2 minutes, with no interruptions, during 
which time they will finish all the pancakes.




In Case #3, one diner starts with 4 pancakes and everyone else's plate is empty. It is optimal 
to use the first minute as a special minute to move two pancakes from the diner's plate to another 
diner's empty plate, and then do nothing and let the diners eat for the second and third minutes.



